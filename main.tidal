d1 $ s "bd"
d1 $ jux rev $ n (off 0.125 (|+ 7) "<c*2 a(3,8) f(3,8,2) e*2>") # sound "supermandolin" # legato 2
d1 $ arp "<pinkyup down thumbup up>" $ n "e'maj c'sus4 e'min c'maj'4" # sound "supermandolin" # sustain 0.5 # # room 0.3 # sz 0.9

d1 (sz 0.9 (room 0.3 (sound "supermandolin" (arp "<pinkyup down up thumbup up>" $ n "e'maj c'sus4 e'min c'maj'4"))))

d1 $ 
  chunk 4 (|- note 5) $
    jux rev $ 
    arp "<pinkyup down thumbup up>" $ n "<c'maj'4 f4'min'8 f4'maj'4>" # sound "supermandolin" # sustain 2 # room 0.3 # sz 0.9

d1 $ (n (run 11) |< s "industrial") 

d1 $ qtrigger 1 $ seqP [(0, 1, s "bd bd")]

d1 $ n "cf'maj c'maj cs'maj" # s "supermandolin"

d2 $ 
  ( fast "0.2" $ arp "down up" $
     (n $ "0 9 9 4 -3 2 5 9 9 2 -5" |+ "<'maj 'min9 'dim 'maj13 'min11>")
   )
  |> s "superpiano"

d1 $ ur 1
  "[beat, n4 m4, beat6]"
  -- "mel"
  [
  ("m4", n (run 4) |> s "superpiano"),
  ("n4", n (run 4) |> s "supermandolin"),
  ("beat", (n (run 7) |> s "industrial")),
  ("beat6", (n "t t f t t f t t" |> s "ht bd")),
  ("mel", (n "0 9 9 4 -3 2 5 9 9 2 -5") |> s "superpiano")
  ]
  []

d1 $ s "ht ht ht ht ht bd [~ sn]"

d1 $ s "{bd cl!3, bd sn bd sn sn}"

d1 $ s (slow "2" $ "[bd [~ sn] bd [sn sn]] ht ht ht")

d1 $ (ur 3 "[sn, ht, bt] [bt, ht] [ht, bt]" [
  ("bt", n "2 1 0 2 1 0 4 4" |> s "industrial"),
  ("sn", s "<bd ht cl>!5 bd [~ sn]"),
  ("ht", n "1 0 0" |> s "hardcore" )
  ]
  [])

d1 $ ((every 3 (0.25 <~)) $ (n "<'min 'min'i 'maj7'ii> 'dim 'min11 'min9")) # s "superpiano"

d2 $ s "bd ht ht"

d1 $
  (
    slow 4 $
    arp "pinkyup down thumbup <up up down>" $
    (every 3 (0.25 <~) $ (n "<'maj7 'min'ii 'maj7'ii> 'dim 'min11 'min9"))
    |+| (n "5 _ 4 3 9 _ 4 0 0 _ 4 3 2 _ 7 3")
  )
  # midichan 0
  -- #
  -- s "superpiano"
  -- s "minifreak"

d1 $ n "0 2 4 7" # midichan 0

d3 $
  (
    slow 4 $
    arp "up down down <up up down>" $
    (n "<'maj7 'min'ii 'maj7'ii> 'min11")
    |+| (n "c e g h")
  ) #
  s "superpiano"
  # room (slow 4 $ range 0 0.2 saw)



d3 $ jux' [id,rev,(# speed 2)] $ every 2 ("<0.25 0.125 0.5>" <~) $ sound "bd*2 [[~ lt] sn:3] lt:1 [ht mt*2]"
  # squiz "<1 2.5 2>"
  # room (slow 4 $ range 0 0.2 saw)
  # sz 0.5
  # orbit 3

-- d3 $ ur  


d3 $
  jux' [id,rev,(# speed 2)] $
  -- jux rev $
  every 2 ("<0.25 0.125 0.5 0.125>" <~) $
  sound "bd*2 [[~ lt] sn] lt*2 [ht*2 mt]"
  # squiz "2.5 1 <1.5 2.5 1>? 1"
  -- # 
  # room (slow 4 $ range 0 0.2 saw)
  # sz 0.5
  # orbit 3

d1 $ 
  stack [
    s "bd sn sn",
    n "0 1 0 2" 
    |> s "bottle"
  ]

d1 $ fast 3 $ s "{bd sn sn sn, cp cp hh}"

d1 $ s "[{bd sn sn sn}%12, {cp cp hh}%12]"

d1 $ ur 1 "{cl4, bd3}" 
  [
    ("bd3", s "bd sn sn"),
    ("cl4", n "0 1 0 2" |> s "ab")
  ]
  []

d1 $ s "{bd sd stab, cp arpy cr bd}"

d1 $ s "{bd!2, hh, 808:4 808:4 808:4}"
-- , bd hh 808:4}"

-- d1 $ s "[bd*3,hh*4,[~ cp]*2, bass*4]"

-- below two are the same
d1 $ s "[bd hh ho hh, {bd cp cp}%4]"

-- same as above ^
d1 $ s "{bd hh ho hh, bd cp cp}"

-- different than above
d1 $ ur 1 "[in3*4, in4*3]" [
  ("in3", s "bd cp cp"),
  ("in4", s "bd hh ho hh")
]
[]

d1 $
  jux' [id, rev, (# speed 2 )] $ 
  octer "1 0 0" >|
  stack [
    n "2 3 3 2 3 3 2 3 2 2 3 2 3"
    |> s "ab",
    n "0 0 0 4 4 0 ~ 0 0 4 0 4 4"
    |> s "ab"
  ]
  # s "out0"

-- brak makes a pattern sound a bit like a breakbeat. It does this by every other cycle, squashing the pattern to fit half a cycle, and offsetting it by a quarter of a cycle.
-- d1 $ brak $ sound "[feel feel:3, hc:3 hc:2 hc:4 ho]"

let 
  f x = stack  [ x ]
  in 
    d1 $ f $ s "bd cp cp"

d1 $ ur 1 "{in3!4}" [
  ("in3", s "bd cp cp"),
  ("in4", s "bd hh ho hh")
]
[]

d1 $
  -- jux' [id, rev, (# speed 2 )] $ 
  octer "1 0 <0 0 0 2>" >|
  stack [
    n "2 3 3 2 3 3 2 3 2 2 3 2 3"
    |> s "ab",
    n "0 0 0 4 4 0 ~ 0 0 4 0 4 4"
    |> s "ab"
  ]


-- midi out

-- uses 
d1 $ sound "bd" # distort (cF 0 "14")


d1 $ sound "amencutup" + n (run (segment 1 $ range 1 16 $ cN 0 "32" ))

d1 $ sound "amencutup" + n (cN 0 "48")

d1 $ jux' [id,rev,(# speed 2)] $ every 2 ("<0.25 0.125 0.5>" <~) $ sound "bd*2 [[~ lt] sn:3] lt:1 [ht mt*2]"
  # squiz "<1 2.5 2>"
  # room (cF 0 "14")
  # distort (cF 0 "14")
  # squiz (cF 0 "14")
  # shape (cF 0 "14")
  # sz 0.5
